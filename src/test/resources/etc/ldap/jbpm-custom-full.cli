embed-server --server-config=standalone.xml

## Activate trace, if needed
##---------------------------
##/subsystem=logging/logger=org.jboss.security/:add(level=TRACE,use-parent-handlers=true)
##/subsystem=logging/logger=javax.security/:add(level=TRACE,use-parent-handlers=true)
##/subsystem=logging/logger=org.jbpm/:add(level=TRACE,use-parent-handlers=true)
##/subsystem=logging/logger=org.kie/:add(level=TRACE,use-parent-handlers=true)
/subsystem=logging/logger=org.wildfly.security/:add(level=TRACE,use-parent-handlers=true)
/subsystem=logging/logger=org.wildfly.elytron/:add(level=TRACE,use-parent-handlers=true)
/subsystem=logging/logger=org.wildfly.extension.undertow/:add(level=TRACE,use-parent-handlers=true)
/subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=TRACE)
##

## Dump http requests
##-------------------
## Simple:
## /subsystem=undertow/server=default-server/host=default-host/setting=access-log:\
##  add(pattern="%h %t \"%r\" %s ", use-server-log=true)
##
## Verbose:
## batch
## /subsystem=undertow/configuration=filter/custom-filter=request-logging-filter:add(class-name=io.undertow.server.handlers.RequestDumpingHandler, module=io.undertow.core)
## /subsystem=undertow/server=default-server/host=default-host/filter-ref=request-logging-filter:add
## run-batch


   

if (outcome != success) of /system-property=org.kie.demo:read-resource
	/system-property=org.kie.server.id:add(value="${org.kie.demo:true}")
else
    /system-property=org.kie.demo:write-attribute(name=value,value="${org.kie.demo:true}")
end-if

if (outcome != success) of /system-property=org.kie.example:read-resource
	/system-property=org.kie.example:add(value="${org.kie.example:true}")
else
    /system-property=org.kie.example:write-attribute(name=value,value="${org.kie.example:true}")
end-if

if (outcome != success) of /system-property=org.jbpm.designer.perspective:read-resource
	/system-property=org.jbpm.designer.perspective:add(value="${org.jbpm.designer.perspective:full}")
else
    /system-property=org.jbpm.designer.perspective:write-attribute(name=value,value="${org.jbpm.designer.perspective:full}")
end-if

if (outcome != success) of /system-property=designerdataobjects:read-resource
	/system-property=designerdataobjects:add(value="${designerdataobjects:false}")
else
    /system-property=designerdataobjects:write-attribute(name=value,value="${designerdataobjects:false}")
end-if

if (outcome != success) of /system-property=org.uberfire.nio.git.ssh.host:read-resource
	/system-property=org.uberfire.nio.git.ssh.host:add(value="0.0.0.0")
else
    /system-property=org.uberfire.nio.git.ssh.host:write-attribute(name=value,value="0.0.0.0")
end-if

if (outcome != success) of /system-property=appformer.experimental.features:read-resource
	/system-property=appformer.experimental.features:add(value="true")
else
    /system-property=appformer.experimental.features:write-attribute(name=value,value="true")
end-if

# Make GIT repositories root directory at /opt/jboss/wildfly/mygit.
# if (outcome != success) of /system-property=org.uberfire.nio.git.dir:read-resource
# 	/system-property=org.uberfire.nio.git.dir:add(value="/opt/jboss/wildfly/mygit")
# else
#     /system-property=org.uberfire.nio.git.dir:write-attribute(name=value,value="/opt/jboss/wildfly/mygit")
# end-if



 
/subsystem=elytron/simple-role-decoder=from-roles-attribute2:add(attribute=Roles)
/subsystem=elytron/dir-context=exampleDC:add(url="ldap://ldap-alias:389",principal="cn=admin,dc=jbpm,dc=org",credential-reference={clear-text="admin"})

/subsystem=elytron/ldap-realm=myRealm:add(dir-context=exampleDC,identity-mapping={search-base-dn="ou=People,dc=jbpm,dc=org",rdn-identifier="uid",user-password-mapper={from="userPassword"},attribute-mapping=[{filter-base-dn="ou=Roles,dc=jbpm,dc=org",filter="(member=uid={0},ou=People,dc=jbpm,dc=org)",from="cn",to="Roles"}]})


/subsystem=elytron/security-domain=ApplicationDomain:list-add(name=realms, index=0, value={realm=myRealm, role-decoder=from-roles-attribute2})
/subsystem=elytron/security-domain=ApplicationDomain:write-attribute(name=default-realm, value=myRealm)

/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=jaeger:write-attribute(name=sampler-param, value=0)


stop-embedded-server