embed-server --server-config=standalone.xml

## Activate trace, if needed
##---------------------------
##/subsystem=logging/logger=org.jboss.security/:add(level=TRACE,use-parent-handlers=true)
##/subsystem=logging/logger=org.jbpm/:add(level=TRACE,use-parent-handlers=true)
##/subsystem=logging/logger=org.kie/:add(level=TRACE,use-parent-handlers=true)
##/subsystem=logging/logger=org.wildfly.security/:add(level=TRACE,use-parent-handlers=true)
##/subsystem=logging/logger=org.wildfly.elytron/:add(level=TRACE,use-parent-handlers=true)
##/subsystem=logging/logger=org.wildfly.extension.undertow/:add(level=TRACE,use-parent-handlers=true)
##/subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=TRACE)
##

## Dump http requests
##-------------------
## Simple:
## /subsystem=undertow/server=default-server/host=default-host/setting=access-log:\
##  add(pattern="%h %t \"%r\" %s ", use-server-log=true)
##
## Verbose:
## batch
## /subsystem=undertow/configuration=filter/custom-filter=request-logging-filter:add(class-name=io.undertow.server.handlers.RequestDumpingHandler, module=io.undertow.core)
## /subsystem=undertow/server=default-server/host=default-host/filter-ref=request-logging-filter:add
## run-batch


# Remove unused login modules
#----------------------------
/subsystem=security/security-domain=other/authentication=classic/login-module=Remoting:remove
/subsystem=security/security-domain=other/authentication=classic/login-module=RealmDirect:remove

## KieLoginModule is needed for kie-server-client (business-central)
##/subsystem=security/security-domain=other/authentication=classic/login-module=org.kie.security.jaas.KieLoginModule:remove
##/subsystem=security/security-domain=other/authentication=classic/login-module=org.kie.security.jaas.KieLoginModule:add(code="org.kie.security.jaas.KieLoginModule",flag="required",module="deployment.business-central.war")

## Add a login module for ldap
   /subsystem=security/security-domain=other/authentication=classic/login-module=LdapExtended:add(code="org.jboss.security.auth.spi.LdapExtLoginModule", flag=required, module-options=[ \
   ("searchScope" => "SUBTREE_SCOPE"), \
   ("java.naming.factory.initial" => "com.sun.jndi.ldap.LdapCtxFactory"), \
   ("java.naming.provider.url" => "ldap://ldap-alias:389"), \
   ("roleAttributeIsDN" => "true"), \
   ("roleAttributeID" => "dn"), \
   ("rolesCtxDN" => "ou=Roles,dc=jbpm,dc=org"), \
   ("roleFilter" => "(member=uid={0},ou=People,dc=jbpm,dc=org)"), \
   ("roleNameAttributeID" => "cn"), \
   ("searchTimeLimit" => "5000"), \
   ("java.naming.security.authentication" => "simple"), \
   ("roleRecursion" => "0"), \
   ("java.naming.referral" => "follow"), \
   ("bindDN" => "cn=admin,dc=jbpm,dc=org"), \
   ("bindCredential" => "admin"), \
   ("baseCtxDN" => "ou=People,dc=jbpm,dc=org"), \
   ("allowEmptyPasswords" => "false"), \
   ("throwValidateError" => "true"), \
   ("baseFilter" => "(uid={0})")])

if (outcome != success) of /system-property=org.kie.demo:read-resource
	/system-property=org.kie.server.id:add(value="${org.kie.demo:true}")
else
    /system-property=org.kie.demo:write-attribute(name=value,value="${org.kie.demo:true}")
end-if

if (outcome != success) of /system-property=org.kie.example:read-resource
	/system-property=org.kie.example:add(value="${org.kie.example:true}")
else
    /system-property=org.kie.example:write-attribute(name=value,value="${org.kie.example:true}")
end-if

if (outcome != success) of /system-property=org.jbpm.designer.perspective:read-resource
	/system-property=org.jbpm.designer.perspective:add(value="${org.jbpm.designer.perspective:full}")
else
    /system-property=org.jbpm.designer.perspective:write-attribute(name=value,value="${org.jbpm.designer.perspective:full}")
end-if

if (outcome != success) of /system-property=designerdataobjects:read-resource
	/system-property=designerdataobjects:add(value="${designerdataobjects:false}")
else
    /system-property=designerdataobjects:write-attribute(name=value,value="${designerdataobjects:false}")
end-if

if (outcome != success) of /system-property=org.uberfire.nio.git.ssh.host:read-resource
	/system-property=org.uberfire.nio.git.ssh.host:add(value="0.0.0.0")
else
    /system-property=org.uberfire.nio.git.ssh.host:write-attribute(name=value,value="0.0.0.0")
end-if

if (outcome != success) of /system-property=appformer.experimental.features:read-resource
	/system-property=appformer.experimental.features:add(value="true")
else
    /system-property=appformer.experimental.features:write-attribute(name=value,value="true")
end-if

# Make GIT repositories root directory at /opt/jboss/wildfly/mygit.
# if (outcome != success) of /system-property=org.uberfire.nio.git.dir:read-resource
# 	/system-property=org.uberfire.nio.git.dir:add(value="/opt/jboss/wildfly/mygit")
# else
#     /system-property=org.uberfire.nio.git.dir:write-attribute(name=value,value="/opt/jboss/wildfly/mygit")
# end-if


### ELYTRON

  # Link legacy security domain (other) with a new elytron-realm
  /subsystem=security/elytron-realm=LegacyRealm:add(legacy-jaas-config=other)
  
  ### If business-central didn't require the KieLoginModule, ldap-realm could be created directly at Elytron
  ###/subsystem=elytron/dir-context=ldap-connection:add(url=ldap://ldap-alias:389, principal="cn=admin,dc=jbpm,dc=org", credential-reference={clear-text=admin})
  ###
  ###/subsystem=elytron/ldap-realm="KieLdap":add(dir-context=ldap-connection, \
  ###          direct-verification=true, \
  ###          identity-mapping={search-base-dn="ou=People,dc=jbpm,dc=org", \
  ###          rdn-identifier="uid", \
  ###          attribute-mapping=[{filter-base-dn="ou=Roles,dc=jbpm,dc=org",filter="(member=uid={0},ou=People,dc=jbpm,dc=org)",from="cn",to="Roles"}]})
  
  /subsystem=elytron/simple-role-decoder=from-roles-attribute:add(attribute=Roles) 
  
  /subsystem=elytron/security-domain=KIEDomain:add(realms=[{realm="LegacyRealm",role-decoder=from-roles-attribute}], default-realm="LegacyRealm", permission-mapper=default-permission-mapper)
  
  /subsystem=elytron/http-authentication-factory=ldap-http-auth:add(http-server-mechanism-factory=global,security-domain=KIEDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name="LegacyRealm"}]}, {mechanism-name=FORM}])
  
  /subsystem=undertow/application-security-domain=KIEDomain:add(http-authentication-factory=ldap-http-auth)

  /subsystem=undertow:write-attribute(name=default-security-domain, value="KIEDomain")

  ##### disable jacc from security subsystem and add enable at elytron by adding new policy 
  
  /subsystem=security:write-attribute(name=initialize-jacc, value=false)
  /subsystem=elytron/policy=jacc:add(jacc-policy={})
  /subsystem=undertow/application-security-domain=KIEDomain:write-attribute(name=enable-jacc, value=true)


stop-embedded-server